
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
   
    <title>Cover Template for Bootstrap</title>

    <!-- Bootstrap core CSS -->
    <link href="../stylesheets/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="../stylesheets/cover.css" rel="stylesheet">

    </head>

    <body>

   <script src="../javascripts/audioRecorder.js"></script>
   <script src="../javascripts/callbackManager.js"></script> 

  <script>


      // These will be initialized later
      var recognizer, recorder, callbackManager, audioContext, outputContainer;
      // Only when both recorder and recognizer do we have a ready application
      var isRecorderReady = isRecognizerReady = false;
	var newHypChinese;
      // A convenience function to post a message to the recognizer and associate
      // a callback to its response
      function postRecognizerJob(message, callback) {
        var msg = message || {};
        if (callbackManager) msg.callbackId = callbackManager.add(callback);
        if (recognizer) recognizer.postMessage(msg);
      };

      // This function initializes an instance of the recorder
      // it posts a message right away and calls onReady when it
      // is ready so that onmessage can be properly set
      function spawnWorker(workerURL, onReady) {
          recognizer = new Worker(workerURL);
          recognizer.onmessage = function(event) {
            onReady(recognizer);
          };
          // Notice that we pass the name of the pocketsphinx.js file to load
          // as we need the file packaged with the Chinese acoustic model
          recognizer.postMessage('pocketsphinx_zh.js');
      };

      // To display the hypothesis sent by the recognizer
      function updateHyp(hyp) {
        if (outputContainer) outputContainer.innerHTML = hyp;
      };

      // A not-so-great recording indicator
      function displayRecording(display) {
        if (display) document.getElementById('recording-indicator').innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
        else document.getElementById('recording-indicator').innerHTML = "";
      };

      // Callback function once the user authorises access to the microphone
      // in it, we instanciate the recorder
      function startUserMedia(stream) { 
        var input = audioContext.createMediaStreamSource(stream);
        // Firefox hack https://support.mozilla.org/en-US/questions/984179
        window.firefox_audio_hack = input;
        // Notice that for this Chinese acoustic model, audio must be at 8kHz, so we should
        // request it from the recorder
        var audioRecorderConfig = {
               errorCallback: function(x) {},
               outputSampleRate: 8000
        };
        recorder = new AudioRecorder(input, audioRecorderConfig);
        // If a recognizer is ready, we pass it to the recorder
        if (recognizer) recorder.consumers = [recognizer];
        isRecorderReady = true;
      };

      // This starts recording. We first need to get the id of the grammar to use
      function startRecording() {
        var id = 0;

        recorder.start(id);
	newHypChinese="";	
	updateHyp(newHypChinese);
      };

      // Stops recording
      function stopRecording () {
	
        recorder && recorder.stop();
	updateHyp(newHypChinese);
      };

      // Called once the recognizer is ready
      // We then add the grammars to the input select tag and update the UI
      var recognizerReady = function() {
           updateGrammars();
           isRecognizerReady = true;
      };

      // We get the grammars defined below and fill in the input select tag
      var updateGrammars = function() {
        var selectTag = document.getElementById('grammars');
        for (var i = 0 ; i < grammarIds.length ; i++) {
            var newElt = document.createElement('option');
            newElt.value=grammarIds[i].id;
            newElt.innerHTML = grammarIds[i].title;
            selectTag.appendChild(newElt);
        }                          
      };

      // This adds a grammar from the grammars array
      // We add them one by one and call it again as
      // a callback.
      // Once we are done adding all grammars, we can call
      // recognizerReady()
      var feedGrammar = function(g, index, id) {
        if (id && (grammarIds.length > 0)) grammarIds[0].id = id.id;
        if (index < g.length) {
          grammarIds.unshift({title: g[index].title})
	  postRecognizerJob({command: 'addGrammar', data: g[index].g},
                             function(id) {feedGrammar(grammars, index + 1, {id:id});});
        } else {
          recognizerReady();
        }
      };

      // This adds words to the recognizer. When it calls back, we add grammars
      var feedWords = function(words) {
           postRecognizerJob({command: 'addWords', data: words},
                        function() {feedGrammar(grammars, 0);});
      };

      // This initializes the recognizer. When it calls back, we add words
      var initRecognizer = function() {
          // You can pass parameters to the recognizer, such as : {command: 'initialize', data: [["-hmm", "my_model"], ["-fwdflat", "no"]]}
          // Pay attention here to state the sample rate as the default value is 16kHz and this Chinese acoustic model uses 8kHz
          postRecognizerJob({command: 'initialize', data:[["-samprate", "8000"]]},
                            function() {
                                        if (recorder) recorder.consumers = [recognizer];
                                        feedWords(wordList);});
      };

      // When the page is loaded, we spawn a new recognizer worker and call getUserMedia to
      // request access to the microphone
      window.onload = function() {
        outputContainer = document.getElementById("output");
        callbackManager = new CallbackManager();
        spawnWorker("js/recognizer.js", function(worker) {
            // This is the onmessage function, once the worker is fully loaded
            worker.onmessage = function(e) {
                // This is the case when we have a callback id to be called
                if (e.data.hasOwnProperty('id')) {
                  var clb = callbackManager.get(e.data['id']);
                  var data = {};
                  if ( e.data.hasOwnProperty('data')) data = e.data.data;
                  if(clb) clb(data);
                }
            
                if (e.data.hasOwnProperty('hyp')) {
                  //var newHyp = e.data.hyp;
                   newHypChinese = e.data.hyp.split(' ').map(function(x) {return wordListChinese[x];}).join(' ');
                  
                }
                // This is the case when we have an error
            };
            // Once the worker is fully loaded, we can call the initialize function
            initRecognizer();
        });

        // The following is to initialize Web Audio
        try {
          window.AudioContext = window.AudioContext || window.webkitAudioContext;
          navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
          window.URL = window.URL || window.webkitURL;
          audioContext = new AudioContext();
        } catch (e) {
        }
        if (navigator.getUserMedia) navigator.getUserMedia({audio: true}, startUserMedia, function(e) {
                                        updateStatus("No live audio input in this browser");
                                    });

      // Wiring JavaScript to the UI
      var startBtn = document.getElementById('startBtn');
      var stopBtn = document.getElementById('stopBtn');

     
      };

      
      var wordList = [["ni_hao","n i h ao"], ["ni_hao_ma", "n i h ao m a"], ["zai_jian", "z ai j ian"], ["huan_ying", "h uan y ing"], ["xie_xie", "x ie x ie"], ["ming_tian_jian", "m ing t ian j ian"]];
      var wordListChinese = {"ni_hao": "你好", "ni_hao_ma": "你好吗", "zai_jian": "再见", "huan_ying": "欢迎", "xie_xie": "谢谢", "ming_tian_jian": "明天见"};
      var grammarChineseGreetings = {numStates: 1, start: 0, end: 0, transitions: [{from: 0, to: 0, word: "ni_hao"},{from: 0, to: 0, word: "ni_hao_ma"},{from: 0, to: 0, word: "zai_jian"},{from: 0, to: 0, word: "huan_ying"},{from: 0, to: 0, word: "xie_xie"},{from: 0, to: 0, word: "ming_tian_jian"}]};
      var grammars = [{title: "Chinese Greetings", g: grammarChineseGreetings}];
      var grammarIds = [];
	
    


	
	var c=10 
	var t 
	function timedCount() 
	{ 
	    document.getElementById("microphone").style.display="block"
	    document.getElementById("startBtn").style.display="none"
	    document.getElementById("stopBtn").style.display="block"
            document.getElementById('txt').value=c
            document.getElementById('output').value="Recording..."
	    t=setInterval("timedCount1()",1000) 
 	    startRecording();

      
	} 
	function stopCount() 
	{ 
	    document.getElementById("stopBtn").style.display="none"
	    document.getElementById("startBtn").style.display="block" 
	    document.getElementById("microphone").style.display="none"
	    //document.getElementById("button1").disabled=true 
            document.getElementById('output').value="Parsing..."
            c=10
            document.getElementById('txt').value=c 
    	    clearInterval(t) 
	    document.getElementById('output').value= newHypChinese;  
            stopRecording();		 
            return   	   
	} 
	function timedCount1() 
        {
           while(c==0)
	    {
	        stopCount()
  	 	return
	       
	    }
	   c=c-1  
           document.getElementById('txt').value=c	
	}
  </script> 

    <div class="site-wrapper">

      <div class="site-wrapper-inner">

        <div class="cover-container">

          <div class="inner cover">
            <p class="cover-heading" style="font-size:50px; color:black">SpeechRecognition</p>
            <div class="recordtextfield">
 		<select id="grammars" style="display:none"></select>
                <input type="text" id="output" style="width:500px;height:100px;color: black;font-size: 20px;">
	    </div>
		<div>
		    <img id="microphone"  src="../images/microphone.gif" style="display:none;text-align:middle;margin-left:28%; width:300px; height:300px">
		</div>
		</br>
		</br>
            	<!--<p class="lead">-->
		<div style="position: absolute;">

		    <input type="button" id="startBtn" value="开始计时！" style="display:block;position: absolute;top: 5px;left: 230px;"  class="btn btn-lg btn-primary" onClick="timedCount()"> 
		    <input type="text" id="txt" value=10 style="color:black;position: absolute;top: 5px;left: 385px;width: 50px;height: 44px;text-align: center;font-size: 23px;"> 
		    <input type="button" id="stopBtn" value="停止计时！" style="display:none;position: absolute;top: 5px;left: 230px;"  class="btn btn-lg btn-primary" onClick="stopCount()"> 
		</div>
            	<!--</p>-->		
            </div>
            <div class="mastfoot">
                <div class="inner">
                <p style="color:black">SpeechRecognition by Matchbox</p>
            </div>
          </div>

        </div>

      </div>

    </div>

 	

  </body>
</html>

